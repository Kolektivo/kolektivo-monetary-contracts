# Simulation incurring and paying debt in the Reserve2
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# First initialize the Oracle with some prices and mint some tokens in order
# to bond them. Afterwards, register the tokens inside the Reserve,
# approve them to the Reserve and bond them.
#
# Having some assets in the Reserve enables us to incur debt without exceeding
# the minimum backing requirement. We check the status of the Reserve and
# finally pay back the debt.

# === Oracles ===

# Set price of example ERC20 token as 2 USD (2e18)
Oracle(ERC20) setPrice 2

# Set price of GeoNFT with ID 1 as 100,000 USD (100,000e18)
Oracle(GeoNFT1) setPrice 100000

# Set price of Reserve's token as being 1 USD (1e18)
Oracle(ReserveToken) setPrice 1

# Set price of Treasury's token as being 1 USD (1e18)
Oracle(Treasury) setPrice 1

# === Token Preparation ===

# Mint some ERC20 tokens. The value of these tokens is 1,000 * 2 USD = 2,000 USD
ERC20 mint 1000

# Print the balance, just to make sure they were actually minted
ERC20 balanceOf

# Approve ERC20 tokens to the Reserve
ERC20 approve Reserve 1000

# Approve GeoNFT with ID 1 to the Reserve
GeoNFT approve Reserve

# === Reserve Preparation ===

# Register ERC20 token
Reserve registerERC20 ERC20

# Register GeoNFT with ID 1
# Note that this NFT is minted already by default
Reserve registerERC721 GeoNFT1

# === Bonding ===

# Bond ERC20 tokens into Reserve and print Reserve status
Reserve bondERC20 ERC20 1000
Reserve status

# Bond GeoNFT with ID 1 into Reserve and print status
Reserve bondERC721 GeoNFT1
Reserve status

# === Incurring Debt ===

# The Reserve holds now:
# 102,000 USD =
#               (2,000 USD = 1,000 ERC20's * 2 USD) +
#               (100,000 USD = GeoNFT with ID 1)
#
# The minimum backing requirement is 75%.
# 102,000 USD * 0.25 = 25,500 USD
# => Leads to a backing percentage of 80%

Reserve incurDebt 25500
Reserve status

# Pay back some debt
Reserve payDebt 10000
Reserve status
