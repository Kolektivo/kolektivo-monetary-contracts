// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddressAddedToWhitelist extends ethereum.Event {
  get params(): AddressAddedToWhitelist__Params {
    return new AddressAddedToWhitelist__Params(this);
  }
}

export class AddressAddedToWhitelist__Params {
  _event: AddressAddedToWhitelist;

  constructor(event: AddressAddedToWhitelist) {
    this._event = event;
  }

  get who(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AddressRemovedFromWhitelist extends ethereum.Event {
  get params(): AddressRemovedFromWhitelist__Params {
    return new AddressRemovedFromWhitelist__Params(this);
  }
}

export class AddressRemovedFromWhitelist__Params {
  _event: AddressRemovedFromWhitelist;

  constructor(event: AddressRemovedFromWhitelist) {
    this._event = event;
  }

  get who(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AssetMarkedAsSupported extends ethereum.Event {
  get params(): AssetMarkedAsSupported__Params {
    return new AssetMarkedAsSupported__Params(this);
  }
}

export class AssetMarkedAsSupported__Params {
  _event: AssetMarkedAsSupported;

  constructor(event: AssetMarkedAsSupported) {
    this._event = event;
  }

  get asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oracle(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AssetMarkedAsSupportedForBonding extends ethereum.Event {
  get params(): AssetMarkedAsSupportedForBonding__Params {
    return new AssetMarkedAsSupportedForBonding__Params(this);
  }
}

export class AssetMarkedAsSupportedForBonding__Params {
  _event: AssetMarkedAsSupportedForBonding;

  constructor(event: AssetMarkedAsSupportedForBonding) {
    this._event = event;
  }

  get asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AssetMarkedAsSupportedForUnbonding extends ethereum.Event {
  get params(): AssetMarkedAsSupportedForUnbonding__Params {
    return new AssetMarkedAsSupportedForUnbonding__Params(this);
  }
}

export class AssetMarkedAsSupportedForUnbonding__Params {
  _event: AssetMarkedAsSupportedForUnbonding;

  constructor(event: AssetMarkedAsSupportedForUnbonding) {
    this._event = event;
  }

  get asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AssetMarkedAsUnsupported extends ethereum.Event {
  get params(): AssetMarkedAsUnsupported__Params {
    return new AssetMarkedAsUnsupported__Params(this);
  }
}

export class AssetMarkedAsUnsupported__Params {
  _event: AssetMarkedAsUnsupported;

  constructor(event: AssetMarkedAsUnsupported) {
    this._event = event;
  }

  get asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AssetMarkedAsUnsupportedForBonding extends ethereum.Event {
  get params(): AssetMarkedAsUnsupportedForBonding__Params {
    return new AssetMarkedAsUnsupportedForBonding__Params(this);
  }
}

export class AssetMarkedAsUnsupportedForBonding__Params {
  _event: AssetMarkedAsUnsupportedForBonding;

  constructor(event: AssetMarkedAsUnsupportedForBonding) {
    this._event = event;
  }

  get asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AssetMarkedAsUnsupportedForUnbonding extends ethereum.Event {
  get params(): AssetMarkedAsUnsupportedForUnbonding__Params {
    return new AssetMarkedAsUnsupportedForUnbonding__Params(this);
  }
}

export class AssetMarkedAsUnsupportedForUnbonding__Params {
  _event: AssetMarkedAsUnsupportedForUnbonding;

  constructor(event: AssetMarkedAsUnsupportedForUnbonding) {
    this._event = event;
  }

  get asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AssetOracleUpdated extends ethereum.Event {
  get params(): AssetOracleUpdated__Params {
    return new AssetOracleUpdated__Params(this);
  }
}

export class AssetOracleUpdated__Params {
  _event: AssetOracleUpdated;

  constructor(event: AssetOracleUpdated) {
    this._event = event;
  }

  get asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldOracle(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newOracle(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class AssetsBonded extends ethereum.Event {
  get params(): AssetsBonded__Params {
    return new AssetsBonded__Params(this);
  }
}

export class AssetsBonded__Params {
  _event: AssetsBonded;

  constructor(event: AssetsBonded) {
    this._event = event;
  }

  get who(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get asset(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get kttsMinted(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AssetsUnbonded extends ethereum.Event {
  get params(): AssetsUnbonded__Params {
    return new AssetsUnbonded__Params(this);
  }
}

export class AssetsUnbonded__Params {
  _event: AssetsUnbonded;

  constructor(event: AssetsUnbonded) {
    this._event = event;
  }

  get who(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get asset(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get kttsBurned(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewOwner extends ethereum.Event {
  get params(): NewOwner__Params {
    return new NewOwner__Params(this);
  }
}

export class NewOwner__Params {
  _event: NewOwner;

  constructor(event: NewOwner) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewPendingOwner extends ethereum.Event {
  get params(): NewPendingOwner__Params {
    return new NewPendingOwner__Params(this);
  }
}

export class NewPendingOwner__Params {
  _event: NewPendingOwner;

  constructor(event: NewPendingOwner) {
    this._event = event;
  }

  get previousPendingOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPendingOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Rebase extends ethereum.Event {
  get params(): Rebase__Params {
    return new Rebase__Params(this);
  }
}

export class Rebase__Params {
  _event: Rebase;

  constructor(event: Rebase) {
    this._event = event;
  }

  get epoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newScalar(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Treasury extends ethereum.SmartContract {
  static bind(address: Address): Treasury {
    return new Treasury("Treasury", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  EIP712_DOMAIN(): Bytes {
    let result = super.call("EIP712_DOMAIN", "EIP712_DOMAIN():(bytes32)", []);

    return result[0].toBytes();
  }

  try_EIP712_DOMAIN(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "EIP712_DOMAIN",
      "EIP712_DOMAIN():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  EIP712_REVISION(): string {
    let result = super.call(
      "EIP712_REVISION",
      "EIP712_REVISION():(string)",
      []
    );

    return result[0].toString();
  }

  try_EIP712_REVISION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "EIP712_REVISION",
      "EIP712_REVISION():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  PERMIT_TYPEHASH(): Bytes {
    let result = super.call(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_PERMIT_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  allowance(owner_: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner_), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(
    owner_: Address,
    spender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner_), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, tokens: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(tokens)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, tokens: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(tokens)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(who: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(who)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(who: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(who)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, tokens: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(tokens)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    tokens: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(tokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseAllowance(spender: Address, tokens: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(tokens)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    tokens: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(tokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isSupportedForBonding(param0: Address): boolean {
    let result = super.call(
      "isSupportedForBonding",
      "isSupportedForBonding(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_isSupportedForBonding(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isSupportedForBonding",
      "isSupportedForBonding(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isSupportedForUnbonding(param0: Address): boolean {
    let result = super.call(
      "isSupportedForUnbonding",
      "isSupportedForUnbonding(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_isSupportedForUnbonding(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isSupportedForUnbonding",
      "isSupportedForUnbonding(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastPricePerAsset(param0: Address): BigInt {
    let result = super.call(
      "lastPricePerAsset",
      "lastPricePerAsset(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_lastPricePerAsset(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastPricePerAsset",
      "lastPricePerAsset(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(who: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(who)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(who: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(who)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oraclePerAsset(param0: Address): Address {
    let result = super.call(
      "oraclePerAsset",
      "oraclePerAsset(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_oraclePerAsset(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "oraclePerAsset",
      "oraclePerAsset(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", "pendingOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingOwner", "pendingOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  scaledBalanceOf(who: Address): BigInt {
    let result = super.call(
      "scaledBalanceOf",
      "scaledBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(who)]
    );

    return result[0].toBigInt();
  }

  try_scaledBalanceOf(who: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "scaledBalanceOf",
      "scaledBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(who)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  scaledTotalSupply(): BigInt {
    let result = super.call(
      "scaledTotalSupply",
      "scaledTotalSupply():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_scaledTotalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "scaledTotalSupply",
      "scaledTotalSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportedAssets(param0: BigInt): Address {
    let result = super.call(
      "supportedAssets",
      "supportedAssets(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_supportedAssets(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "supportedAssets",
      "supportedAssets(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalValuation(): BigInt {
    let result = super.call("totalValuation", "totalValuation():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalValuation(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalValuation",
      "totalValuation():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, tokens: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(tokens)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, tokens: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(tokens)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferAll(to: Address): boolean {
    let result = super.call("transferAll", "transferAll(address):(bool)", [
      ethereum.Value.fromAddress(to)
    ]);

    return result[0].toBoolean();
  }

  try_transferAll(to: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("transferAll", "transferAll(address):(bool)", [
      ethereum.Value.fromAddress(to)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferAllFrom(from: Address, to: Address): boolean {
    let result = super.call(
      "transferAllFrom",
      "transferAllFrom(address,address):(bool)",
      [ethereum.Value.fromAddress(from), ethereum.Value.fromAddress(to)]
    );

    return result[0].toBoolean();
  }

  try_transferAllFrom(
    from: Address,
    to: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferAllFrom",
      "transferAllFrom(address,address):(bool)",
      [ethereum.Value.fromAddress(from), ethereum.Value.fromAddress(to)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, tokens: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(tokens)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    tokens: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(tokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  whitelist(param0: Address): boolean {
    let result = super.call("whitelist", "whitelist(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_whitelist(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("whitelist", "whitelist(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AddToWhitelistCall extends ethereum.Call {
  get inputs(): AddToWhitelistCall__Inputs {
    return new AddToWhitelistCall__Inputs(this);
  }

  get outputs(): AddToWhitelistCall__Outputs {
    return new AddToWhitelistCall__Outputs(this);
  }
}

export class AddToWhitelistCall__Inputs {
  _call: AddToWhitelistCall;

  constructor(call: AddToWhitelistCall) {
    this._call = call;
  }

  get who(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddToWhitelistCall__Outputs {
  _call: AddToWhitelistCall;

  constructor(call: AddToWhitelistCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokens(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BondCall extends ethereum.Call {
  get inputs(): BondCall__Inputs {
    return new BondCall__Inputs(this);
  }

  get outputs(): BondCall__Outputs {
    return new BondCall__Outputs(this);
  }
}

export class BondCall__Inputs {
  _call: BondCall;

  constructor(call: BondCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BondCall__Outputs {
  _call: BondCall;

  constructor(call: BondCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokens(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ExecuteTxCall extends ethereum.Call {
  get inputs(): ExecuteTxCall__Inputs {
    return new ExecuteTxCall__Inputs(this);
  }

  get outputs(): ExecuteTxCall__Outputs {
    return new ExecuteTxCall__Outputs(this);
  }
}

export class ExecuteTxCall__Inputs {
  _call: ExecuteTxCall;

  constructor(call: ExecuteTxCall) {
    this._call = call;
  }

  get target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get callData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class ExecuteTxCall__Outputs {
  _call: ExecuteTxCall;

  constructor(call: ExecuteTxCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokens(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class RebaseCall extends ethereum.Call {
  get inputs(): RebaseCall__Inputs {
    return new RebaseCall__Inputs(this);
  }

  get outputs(): RebaseCall__Outputs {
    return new RebaseCall__Outputs(this);
  }
}

export class RebaseCall__Inputs {
  _call: RebaseCall;

  constructor(call: RebaseCall) {
    this._call = call;
  }
}

export class RebaseCall__Outputs {
  _call: RebaseCall;

  constructor(call: RebaseCall) {
    this._call = call;
  }
}

export class RemoveFromWhitelistCall extends ethereum.Call {
  get inputs(): RemoveFromWhitelistCall__Inputs {
    return new RemoveFromWhitelistCall__Inputs(this);
  }

  get outputs(): RemoveFromWhitelistCall__Outputs {
    return new RemoveFromWhitelistCall__Outputs(this);
  }
}

export class RemoveFromWhitelistCall__Inputs {
  _call: RemoveFromWhitelistCall;

  constructor(call: RemoveFromWhitelistCall) {
    this._call = call;
  }

  get who(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveFromWhitelistCall__Outputs {
  _call: RemoveFromWhitelistCall;

  constructor(call: RemoveFromWhitelistCall) {
    this._call = call;
  }
}

export class SetPendingOwnerCall extends ethereum.Call {
  get inputs(): SetPendingOwnerCall__Inputs {
    return new SetPendingOwnerCall__Inputs(this);
  }

  get outputs(): SetPendingOwnerCall__Outputs {
    return new SetPendingOwnerCall__Outputs(this);
  }
}

export class SetPendingOwnerCall__Inputs {
  _call: SetPendingOwnerCall;

  constructor(call: SetPendingOwnerCall) {
    this._call = call;
  }

  get pendingOwner_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPendingOwnerCall__Outputs {
  _call: SetPendingOwnerCall;

  constructor(call: SetPendingOwnerCall) {
    this._call = call;
  }
}

export class SupportAssetCall extends ethereum.Call {
  get inputs(): SupportAssetCall__Inputs {
    return new SupportAssetCall__Inputs(this);
  }

  get outputs(): SupportAssetCall__Outputs {
    return new SupportAssetCall__Outputs(this);
  }
}

export class SupportAssetCall__Inputs {
  _call: SupportAssetCall;

  constructor(call: SupportAssetCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get oracle(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SupportAssetCall__Outputs {
  _call: SupportAssetCall;

  constructor(call: SupportAssetCall) {
    this._call = call;
  }
}

export class SupportAssetForBondingCall extends ethereum.Call {
  get inputs(): SupportAssetForBondingCall__Inputs {
    return new SupportAssetForBondingCall__Inputs(this);
  }

  get outputs(): SupportAssetForBondingCall__Outputs {
    return new SupportAssetForBondingCall__Outputs(this);
  }
}

export class SupportAssetForBondingCall__Inputs {
  _call: SupportAssetForBondingCall;

  constructor(call: SupportAssetForBondingCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SupportAssetForBondingCall__Outputs {
  _call: SupportAssetForBondingCall;

  constructor(call: SupportAssetForBondingCall) {
    this._call = call;
  }
}

export class SupportAssetForUnbondingCall extends ethereum.Call {
  get inputs(): SupportAssetForUnbondingCall__Inputs {
    return new SupportAssetForUnbondingCall__Inputs(this);
  }

  get outputs(): SupportAssetForUnbondingCall__Outputs {
    return new SupportAssetForUnbondingCall__Outputs(this);
  }
}

export class SupportAssetForUnbondingCall__Inputs {
  _call: SupportAssetForUnbondingCall;

  constructor(call: SupportAssetForUnbondingCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SupportAssetForUnbondingCall__Outputs {
  _call: SupportAssetForUnbondingCall;

  constructor(call: SupportAssetForUnbondingCall) {
    this._call = call;
  }
}

export class TotalValuationCall extends ethereum.Call {
  get inputs(): TotalValuationCall__Inputs {
    return new TotalValuationCall__Inputs(this);
  }

  get outputs(): TotalValuationCall__Outputs {
    return new TotalValuationCall__Outputs(this);
  }
}

export class TotalValuationCall__Inputs {
  _call: TotalValuationCall;

  constructor(call: TotalValuationCall) {
    this._call = call;
  }
}

export class TotalValuationCall__Outputs {
  _call: TotalValuationCall;

  constructor(call: TotalValuationCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokens(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferAllCall extends ethereum.Call {
  get inputs(): TransferAllCall__Inputs {
    return new TransferAllCall__Inputs(this);
  }

  get outputs(): TransferAllCall__Outputs {
    return new TransferAllCall__Outputs(this);
  }
}

export class TransferAllCall__Inputs {
  _call: TransferAllCall;

  constructor(call: TransferAllCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferAllCall__Outputs {
  _call: TransferAllCall;

  constructor(call: TransferAllCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferAllFromCall extends ethereum.Call {
  get inputs(): TransferAllFromCall__Inputs {
    return new TransferAllFromCall__Inputs(this);
  }

  get outputs(): TransferAllFromCall__Outputs {
    return new TransferAllFromCall__Outputs(this);
  }
}

export class TransferAllFromCall__Inputs {
  _call: TransferAllFromCall;

  constructor(call: TransferAllFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class TransferAllFromCall__Outputs {
  _call: TransferAllFromCall;

  constructor(call: TransferAllFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokens(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UnbondCall extends ethereum.Call {
  get inputs(): UnbondCall__Inputs {
    return new UnbondCall__Inputs(this);
  }

  get outputs(): UnbondCall__Outputs {
    return new UnbondCall__Outputs(this);
  }
}

export class UnbondCall__Inputs {
  _call: UnbondCall;

  constructor(call: UnbondCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get kttWad(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnbondCall__Outputs {
  _call: UnbondCall;

  constructor(call: UnbondCall) {
    this._call = call;
  }
}

export class UnsupportAssetCall extends ethereum.Call {
  get inputs(): UnsupportAssetCall__Inputs {
    return new UnsupportAssetCall__Inputs(this);
  }

  get outputs(): UnsupportAssetCall__Outputs {
    return new UnsupportAssetCall__Outputs(this);
  }
}

export class UnsupportAssetCall__Inputs {
  _call: UnsupportAssetCall;

  constructor(call: UnsupportAssetCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UnsupportAssetCall__Outputs {
  _call: UnsupportAssetCall;

  constructor(call: UnsupportAssetCall) {
    this._call = call;
  }
}

export class UnsupportAssetForBondingCall extends ethereum.Call {
  get inputs(): UnsupportAssetForBondingCall__Inputs {
    return new UnsupportAssetForBondingCall__Inputs(this);
  }

  get outputs(): UnsupportAssetForBondingCall__Outputs {
    return new UnsupportAssetForBondingCall__Outputs(this);
  }
}

export class UnsupportAssetForBondingCall__Inputs {
  _call: UnsupportAssetForBondingCall;

  constructor(call: UnsupportAssetForBondingCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UnsupportAssetForBondingCall__Outputs {
  _call: UnsupportAssetForBondingCall;

  constructor(call: UnsupportAssetForBondingCall) {
    this._call = call;
  }
}

export class UnsupportAssetForUnbondingCall extends ethereum.Call {
  get inputs(): UnsupportAssetForUnbondingCall__Inputs {
    return new UnsupportAssetForUnbondingCall__Inputs(this);
  }

  get outputs(): UnsupportAssetForUnbondingCall__Outputs {
    return new UnsupportAssetForUnbondingCall__Outputs(this);
  }
}

export class UnsupportAssetForUnbondingCall__Inputs {
  _call: UnsupportAssetForUnbondingCall;

  constructor(call: UnsupportAssetForUnbondingCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UnsupportAssetForUnbondingCall__Outputs {
  _call: UnsupportAssetForUnbondingCall;

  constructor(call: UnsupportAssetForUnbondingCall) {
    this._call = call;
  }
}

export class UpdateAssetOracleCall extends ethereum.Call {
  get inputs(): UpdateAssetOracleCall__Inputs {
    return new UpdateAssetOracleCall__Inputs(this);
  }

  get outputs(): UpdateAssetOracleCall__Outputs {
    return new UpdateAssetOracleCall__Outputs(this);
  }
}

export class UpdateAssetOracleCall__Inputs {
  _call: UpdateAssetOracleCall;

  constructor(call: UpdateAssetOracleCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get oracle(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UpdateAssetOracleCall__Outputs {
  _call: UpdateAssetOracleCall;

  constructor(call: UpdateAssetOracleCall) {
    this._call = call;
  }
}
